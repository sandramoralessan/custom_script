


% Load the video
VideoObj = VideoReader("../Videos/25.mp4");
frame = VideoObj.readFrame;

% Initialize pixel count
num_pixels = uint16(VideoObj.Duration * VideoObj.FrameRate);

% Initialize coordinates
coordinates = ones(num_pixels, 2);

for k = 1:num_pixels
  
   if k == 1
       frame = VideoObj.readFrame;
       imshow(frame);
       hold on;
       [x, y] = ginput(1);
       mouse_pos = [x, y];
       plot(x, y, 'MarkerSize', 20, 'Color', "red", 'LineWidth', 5);
       hold off;
       coordinates(k, :) = [x, y];
   else
       frame = VideoObj.readFrame;
       I = tracker_morris25(frame); % Color threshold tracker
       ee = strel("disk", 3); % Morphological operation
       I2 = imopen(I, ee);
       I2 = imclearborder(I2);
       hold on;
       objects = bwlabel(I2);
       properties = regionprops(objects);
       areas = cat(1, properties.Area);
       centroids = cat(1, properties.Centroid);
       num_objects = length(centroids(:, 1));
       distances = ones(num_objects, 1);
       
       for i = 1:num_objects
           distances(i) = sqrt((mouse_pos(1) - centroids(i, 1))^2 + (mouse_pos(2) - centroids(i, 2))^2);
       end
       
       closest_index = find(distances == min(distances));
       
       if distances(closest_index) > 50
           mouse_pos = mouse_pos;
       else
           mouse_pos = centroids(closest_index, :);
       end
       
       hold off;
       coordinates(k, :) = mouse_pos;
       pause(0.0000001);
  
       % Real-time path visualization
       imshow(frame);
       hold on;
       plot(coordinates(1:k, 1), coordinates(1:k, 2), 'r-', 'LineWidth', 2);
       plot(mouse_pos(1), mouse_pos(2), 'rx', 'MarkerSize', 10, 'LineWidth', 2);
       hold off;
       drawnow; % Update the figure
   end 
  
end

imshow(frame);
hold on;
plot(coordinates(:, 1), coordinates(:, 2), 'LineWidth', 3, 'Color', "red");

% Create heatmap
frame = read(VideoObj, Inf);
heatmap = zeros(size(frame, 1), size(frame, 2));
density_map = zeros(size(frame, 1), size(frame, 2));

for i = 1:size(coordinates, 1)
    x = round(coordinates(i, 1));
    y = round(coordinates(i, 2));
    if x > 0 && y > 0 && x <= size(heatmap, 2) && y <= size(heatmap, 1)
        heatmap(y, x) = heatmap(y, x) + 1;
        density_map(y, x) = density_map(y, x) + 1;
    end
end

heatmap = imgaussfilt(heatmap, 10);
density_map = imgaussfilt(density_map, 10);

heatmap = heatmap / max(heatmap(:));
density_map = density_map / max(density_map(:));

intensity_factor = 2.2;
heatmap = heatmap * intensity_factor;
density_map = density_map * intensity_factor;

heatmap(heatmap > 1) = 1;
density_map(density_map > 1) = 1;

heatmap_rgb = ind2rgb(gray2ind(heatmap, 256), jet(256));
frame_double = im2double(frame);

transparency_factor = 0.3;
combined_image = bsxfun(@times, frame_double, 1 - transparency_factor) + ...
                 bsxfun(@times, heatmap_rgb, transparency_factor);

figure;
imshow(combined_image);
title('Heatmap with Transparency Overlay on Last Video Frame');

% Colorbar legend
figure;
colormap('jet');
colorbar;
caxis([0 1]);

legend_heatmap = heatmap / max(heatmap(:));
imagesc(legend_heatmap);
colorbar;
title('Intensity Legend');

% Quadrant calculations
marks = [
    200, 160;
    730, 180;
    700, 756;
    180, 730;
];

center_pool = mean(marks);
distances_to_center = sqrt((marks(:, 1) - center_pool(1)).^2 + (marks(:, 2) - center_pool(2)).^2);
pool_radius = mean(distances_to_center);

figure;
imshow(combined_image);
hold on;

theta = linspace(0, 2*pi, 1000);
x_circ = pool_radius * cos(theta) + center_pool(1);
y_circ = pool_radius * sin(theta) + center_pool(2);

plot(x_circ, y_circ, 'w-', 'LineWidth', 2);

plot([marks(1, 1), center_pool(1)], [marks(1, 2), center_pool(2)], 'w-', 'LineWidth', 2);
plot([marks(4, 1), center_pool(1)], [marks(4, 2), center_pool(2)], 'r-', 'LineWidth', 2);

hold off;
title('Heatmap with Quadrant Marked in Red');

% Time spent in the correct quadrant
line_side = @(p1, p2, x, y) (p2(1) - p1(1)) * (y - p1(2)) - (p2(2) - p1(2)) * (x - p1(1));

left_quadrant = arrayfun(@(x, y) ...
    (line_side(marks(1,:), center_pool, x, y) > 0) && ...
    (line_side(marks(4,:), center_pool, x, y) < 0), ...
    coordinates(:, 1), coordinates(:, 2));

extended_left_quadrant = left_quadrant;
for k = 2:(size(coordinates, 1) - 1)
    if ~left_quadrant(k) && isnan(coordinates(k, 1))
        if left_quadrant(k-1) || left_quadrant(k+1)
            extended_left_quadrant(k) = true;
        end
    end
end

frames_in_left = sum(extended_left_quadrant);
time_in_left = frames_in_left / VideoObj.FrameRate;
